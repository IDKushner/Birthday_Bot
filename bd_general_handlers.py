from telegram import ParseMode, ReplyKeyboardMarkup, ReplyKeyboardRemove
from datetime import datetime, date

from bd_db import db, get_or_create_user, user_birthday_list, update_person, make_all_birthdays_upcoming
from bd_utils import main_keyboard


def start(update, context):
    user = get_or_create_user(db, update.effective_user, update.message.chat.id)
    update.message.reply_text(
        f'''–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n–Ø - –±–æ—Ç-–ø–æ–∑–¥—Ä–∞–≤–ª—è—à–∫–∞, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏ –±–ª–∏–∑–∫–∏—Ö\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º :)
        ''',
        reply_markup=main_keyboard(), 
    )

def explain(update, context):
    text = '<b> –ß—Ç–æ —è —É–º–µ—é: </b>\n\n'
    text += '<b>–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–¥–µ–π:</b> –Ω–∞–∂–º–∏ "–î–æ–±–∞–≤–∏—Ç—å" –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n'
    text += '<b>–ü—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–∞–∑–µ:</b> –Ω–∞–∂–º–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –∏ –≤–≤–µ–¥–∏ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞: –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —è –≤—ã–¥–∞–º —Ç–µ–±–µ –≤—Å—é –∏–º–µ—é—â—É—é—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–∫–∞–∂—É –æ–± —ç—Ç–æ–º\n'
    text += '<b>–ò–∑–º–µ–Ω—è—Ç—å</b> –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–Ω–æ—Å–∏–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ (–∏–º—è, –¥–∞—Ç—É –¥—Ä, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä.). –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"\n'
    text += '<b>–£–¥–∞–ª—è—Ç—å –ª—é–¥–µ–π:</b> –Ω–∞–∂–º–∏ "–£–¥–∞–ª–∏—Ç—å", –≤–≤–µ–¥–∏ –∏–º—è, –∏ —è –±–æ–ª—å—à–µ —Ç–µ–±–µ –æ –Ω—ë–º –Ω–µ –Ω–∞–ø–æ–º–Ω—é! (–ù–µ –æ—á–µ–Ω—å-—Ç–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å)\n'
    text += '<b>–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ:</b> –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –î–†"'
    update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=main_keyboard()
    )

def wtf(update, context):
    update.message.reply_text('–ù–µ –ø–æ–Ω–∏–º–∞—é :(')

def talk_to_me(update, context):
    update.message.reply_text('ü§ñ')

def confirm_date(user_date):
    divided_date = user_date.split('.')
    if len(divided_date) < 3:
        return '–¢—ã –∑–∞–±—ã–ª —á—Ç–æ-—Ç–æ –≤–≤–µ—Å—Ç–∏ (–î–î, –ú–ú –∏–ª–∏ –ì–ì–ì–ì) –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–µ "." –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è'
    if len(divided_date[0]) < 2 or len(divided_date[1]) < 2 or len(divided_date[2]) < 4:
        return '–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –¥—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì'
    if int(divided_date[1]) > 12:
        return '–ú–µ—Å—è—Ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 12'
    try:
        date_ = datetime.strptime(user_date, '%d.%m.%Y')
        if date_.year > date.today().year:
            return '–ù–µ–ª—å–∑—è —Ä–æ–¥–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º :('
    except ValueError:
        return '–ù–æ–º–µ—Ä –¥–Ω—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç—ã –≤–≤–æ–¥–∏—à—å 30-–æ–µ —Ñ–µ–≤—Ä–∞–ª—è)'
    else:
        return True

def check_if_upcoming(user_date):
    d, m, y = list(map(int, user_date.split('.')))
    birthday = date(date.today().year, m, d)
    if birthday > date.today():
        return True
    else:
        return False

def confirm_reminder_date(user_reminder_date):
    try:
        reminder_date = int(user_reminder_date)
    except:
        return '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥—Ä, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π'

    if reminder_date > 366:
        return '–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ —á–∞–º –∑–∞ –≥–æ–¥ –¥–æ –¥—Ä'
    
    return True

def check_upcoming_birthdays(context): 

    for user in db.users.find():
        birthday_list = user_birthday_list(user['user_id'])
        reminder = []
        for person in birthday_list:
            if person != None:
                if person['upcoming_birthday'] == True:
                    d, m, y = list(map(int, person['date'].split('.')))
                    birthday = date(date.today().year, m, d)
                    delta = birthday - date.today()
                    years = (abs(date(y, m, d) - birthday)/365).days
                    if delta.days in set(person['reminder_dates']):
                        for reminder_date in set(person['reminder_dates']):
                            if delta.days - reminder_date == 0:
                                reminder.append([reminder_date, person['name'], person['date'], years])
                                if reminder_date == 0:
                                    person_data = {'name':person['name'], 'field':'upcoming_birthday', 'change':False}
                                    update_person(user['user_id'], person_data)

        if len(reminder) > 0:
            upcoming_birthdays = format_upcoming_birthdays(reminder)
            reminder.clear()
            context.bot.send_message(
                chat_id = user['chat_id'],
                text = upcoming_birthdays,
                parse_mode=ParseMode.HTML 
            )
        
def format_upcoming_birthdays(reminder):
    text = f'<b>–°–≤–æ–¥–∫–∞ –ø–æ –±–ª–∏–∂–∞–π—à–∏–º –î–†</b>\n'

    sorted_reminder = sorted(reminder, key = lambda x: x[0])

    for person in sorted_reminder:
        reminder_date = person[0]
        name = person[1]
        birthday_date = person[2]
        years = person[3]
        if reminder_date == 0:
            text += f"\n{sorted_reminder.index(person)+1}) {name}: {birthday_date}. –°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {years}"
        else:
            text += f"\n{sorted_reminder.index(person)+1}) {name}: {birthday_date}. –ß–µ—Ä–µ–∑ {reminder_date} –¥–Ω–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è {years}"

    text += f'\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ (–∏–Ω—Ç–µ—Ä–µ—Å—ã, –ø–æ–¥–∞—Ä–∫–∏ –∏ –ø—Ä–æ—á–µ–µ), –Ω–∞–∂–º–∏ "<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>" –∏ –≤–≤–µ–¥–∏ –µ–≥–æ –∏–º—è'

    return text

def if_all_birthdays_are_upcoming(context):
    if date.today().month == 12:
        make_all_birthdays_upcoming()

def send_base(update, context):
    user = get_or_create_user(db, update.effective_user, update.message.chat.id)
    birthday_list = user_birthday_list(user['user_id'])
    text = '<b>–í—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –î–†:</b>\n'

    temp = []
    for person in birthday_list:
        if person != None:
            temp.append([person['name'], person['date']])
    
    sorted_base = sorted(temp, key = lambda x: x[0])
    for person in sorted_base:
        text += f"\n{sorted_base.index(person)+1}) {person[0]}: {person[1]}"

    update.message.reply_text(
        text,
        reply_markup=main_keyboard(),
        parse_mode=ParseMode.HTML
    )
